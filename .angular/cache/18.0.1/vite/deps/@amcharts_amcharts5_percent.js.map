{
  "version": 3,
  "sources": ["../../../../../node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentDefaultTheme.js", "../../../../../node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentChart.js", "../../../../../node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentSeries.js", "../../../../../node_modules/@amcharts/amcharts5/.internal/charts/pie/PieChart.js", "../../../../../node_modules/@amcharts/amcharts5/.internal/charts/pie/PieSeries.js", "../../../../../node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSlice.js", "../../../../../node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSeries.js", "../../../../../node_modules/@amcharts/amcharts5/.internal/charts/funnel/PyramidSeries.js", "../../../../../node_modules/@amcharts/amcharts5/.internal/charts/funnel/PictorialStackedSeries.js", "../../../../../node_modules/@amcharts/amcharts5/.internal/charts/funnel/SlicedChart.js"],
  "sourcesContent": ["import { Theme } from \"../../core/Theme\";\r\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\r\nimport { ColorSet } from \"../../core/util/ColorSet\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n/**\r\n * @ignore\r\n */\r\nexport class PercentDefaultTheme extends Theme {\r\n    setupDefaultRules() {\r\n        super.setupDefaultRules();\r\n        const ic = this._root.interfaceColors;\r\n        const r = this.rule.bind(this);\r\n        /**\r\n         * ========================================================================\r\n         * charts/percent\r\n         * ========================================================================\r\n         */\r\n        r(\"PercentSeries\").setAll({\r\n            legendLabelText: \"{category}\",\r\n            legendValueText: \"{valuePercentTotal.formatNumber('0.00p')}\",\r\n            colors: ColorSet.new(this._root, {}),\r\n            width: p100,\r\n            height: p100\r\n        });\r\n        /**\r\n         * ========================================================================\r\n         * charts/pie\r\n         * ========================================================================\r\n         */\r\n        r(\"PieChart\").setAll({\r\n            radius: percent(80),\r\n            startAngle: -90,\r\n            endAngle: 270\r\n        });\r\n        r(\"PieSeries\").setAll({\r\n            alignLabels: true,\r\n            startAngle: -90,\r\n            endAngle: 270\r\n        });\r\n        r(\"PieSeries\").states.create(\"hidden\", { endAngle: -90, opacity: 0 });\r\n        r(\"Slice\", [\"pie\"]).setAll({\r\n            position: \"absolute\",\r\n            isMeasured: false,\r\n            x: 0,\r\n            y: 0,\r\n            toggleKey: \"active\",\r\n            tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            role: \"figure\",\r\n            lineJoin: \"round\"\r\n        });\r\n        r(\"Slice\", [\"pie\"]).states.create(\"active\", { shiftRadius: 20, scale: 1 });\r\n        r(\"Slice\", [\"pie\"]).states.create(\"hoverActive\", { scale: 1.04 });\r\n        r(\"Slice\", [\"pie\"]).states.create(\"hover\", { scale: 1.04 });\r\n        r(\"RadialLabel\", [\"pie\"]).setAll({\r\n            textType: \"aligned\",\r\n            radius: 10,\r\n            text: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            paddingTop: 5,\r\n            paddingBottom: 5,\r\n            populateText: true\r\n        });\r\n        r(\"Tick\", [\"pie\"]).setAll({\r\n            location: 1\r\n        });\r\n        /**\r\n         * ========================================================================\r\n         * charts/funnel\r\n         * ========================================================================\r\n         */\r\n        r(\"SlicedChart\").setAll({\r\n            paddingLeft: 10,\r\n            paddingRight: 10,\r\n            paddingTop: 10,\r\n            paddingBottom: 10\r\n        });\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * charts/funnel: Funnel\r\n         * ------------------------------------------------------------------------\r\n         */\r\n        r(\"FunnelSeries\").setAll({\r\n            startLocation: 0,\r\n            endLocation: 1,\r\n            orientation: \"vertical\",\r\n            alignLabels: true,\r\n            sequencedInterpolation: true\r\n        });\r\n        r(\"FunnelSlice\").setAll({\r\n            interactive: true,\r\n            expandDistance: 0,\r\n            //tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n        });\r\n        r(\"FunnelSlice\").states.create(\"hover\", { expandDistance: 0.15 });\r\n        r(\"Label\", [\"funnel\"]).setAll({\r\n            populateText: true,\r\n            text: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            centerY: p50\r\n        });\r\n        r(\"Label\", [\"funnel\", \"horizontal\"]).setAll({\r\n            centerX: 0,\r\n            centerY: p50,\r\n            rotation: -90\r\n        });\r\n        // Class: Label\r\n        r(\"Label\", [\"funnel\", \"vertical\"]).setAll({\r\n            centerY: p50,\r\n            centerX: 0\r\n        });\r\n        r(\"Tick\", [\"funnel\"]).setAll({\r\n            location: 1\r\n        });\r\n        r(\"FunnelSlice\", [\"funnel\", \"link\"]).setAll({\r\n            fillOpacity: 0.5,\r\n            strokeOpacity: 0,\r\n            expandDistance: -0.1\r\n        });\r\n        r(\"FunnelSlice\", [\"funnel\", \"link\", \"vertical\"]).setAll({\r\n            height: 10,\r\n        });\r\n        r(\"FunnelSlice\", [\"funnel\", \"link\", \"horizontal\"]).setAll({\r\n            width: 10\r\n        });\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * charts/funnel: Pyramid\r\n         * ------------------------------------------------------------------------\r\n         */\r\n        r(\"PyramidSeries\").setAll({\r\n            valueIs: \"area\"\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\", \"link\"]).setAll({\r\n            fillOpacity: 0.5\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\", \"link\", \"vertical\"]).setAll({\r\n            height: 0\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\", \"link\", \"horizontal\"]).setAll({\r\n            width: 0\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\"]).setAll({\r\n            interactive: true,\r\n            expandDistance: 0\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\"]).states.create(\"hover\", { expandDistance: 0.15 });\r\n        r(\"Label\", [\"pyramid\"]).setAll({\r\n            populateText: true,\r\n            text: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            centerY: p50\r\n        });\r\n        r(\"Label\", [\"pyramid\", \"horizontal\"]).setAll({\r\n            centerX: 0,\r\n            centerY: p50,\r\n            rotation: -90\r\n        });\r\n        r(\"Label\", [\"pyramid\", \"vertical\"]).setAll({\r\n            centerY: p50,\r\n            centerX: 0\r\n        });\r\n        r(\"Tick\", [\"pyramid\"]).setAll({\r\n            location: 1\r\n        });\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * charts/funnel: Pictorial\r\n         * ------------------------------------------------------------------------\r\n         */\r\n        // Class: FunnelSlice\r\n        r(\"FunnelSlice\", [\"pictorial\"]).setAll({\r\n            interactive: true,\r\n            tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n        });\r\n        r(\"Label\", [\"pictorial\"]).setAll({\r\n            populateText: true,\r\n            text: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            centerY: p50\r\n        });\r\n        r(\"Label\", [\"pictorial\", \"horizontal\"]).setAll({\r\n            centerX: 0,\r\n            centerY: p50,\r\n            rotation: -90\r\n        });\r\n        r(\"Label\", [\"pictorial\", \"vertical\"]).setAll({\r\n            centerY: p50,\r\n            centerX: 0\r\n        });\r\n        r(\"FunnelSlice\", [\"pictorial\", \"link\"]).setAll({\r\n            fillOpacity: 0.5,\r\n            width: 0,\r\n            height: 0\r\n        });\r\n        r(\"Tick\", [\"pictorial\"]).setAll({\r\n            location: 0.5\r\n        });\r\n        {\r\n            const rule = r(\"Graphics\", [\"pictorial\", \"background\"]);\r\n            rule.setAll({\r\n                fillOpacity: 0.2\r\n            });\r\n            setColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n        }\r\n    }\r\n}\r\n", "import { SerialChart } from \"../../core/render/SerialChart\";\r\nimport { PercentDefaultTheme } from \"./PercentDefaultTheme\";\r\n/**\r\n * Base class for [[PieChart]].\r\n *\r\n * Also used for percent-based series, like [[FunnelSeries]], [[PyramidSeries]], etc.\r\n *\r\n * @important\r\n */\r\nexport class PercentChart extends SerialChart {\r\n    _afterNew() {\r\n        this._defaultThemes.push(PercentDefaultTheme.new(this._root));\r\n        super._afterNew();\r\n        this.chartContainer.children.push(this.seriesContainer);\r\n        this.seriesContainer.children.push(this.bulletsContainer);\r\n    }\r\n    _processSeries(series) {\r\n        super._processSeries(series);\r\n        this.seriesContainer.children.moveValue(this.bulletsContainer, this.seriesContainer.children.length - 1);\r\n    }\r\n}\r\nObject.defineProperty(PercentChart, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PercentChart\"\r\n});\r\nObject.defineProperty(PercentChart, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: SerialChart.classNames.concat([PercentChart.className])\r\n});\r\n", "import { __awaiter } from \"tslib\";\r\nimport { Series } from \"../../core/render/Series\";\r\nimport { Container } from \"../../core/render/Container\";\r\nimport { visualSettings } from \"../../core/render/Graphics\";\r\nimport * as $array from \"../../core/util/Array\";\r\nimport * as $type from \"../../core/util/Type\";\r\n/**\r\n * A base class for any percent chart series.\r\n */\r\nexport class PercentSeries extends Series {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"slicesContainer\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }))\r\n        });\r\n        Object.defineProperty(this, \"labelsContainer\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }))\r\n        });\r\n        Object.defineProperty(this, \"ticksContainer\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }))\r\n        });\r\n        Object.defineProperty(this, \"_lLabels\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        Object.defineProperty(this, \"_rLabels\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        Object.defineProperty(this, \"_hLabels\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        /**\r\n         * A [[ListTemplate]] of all slices in series.\r\n         *\r\n         * `slices.template` can also be used to configure slices.\r\n         */\r\n        Object.defineProperty(this, \"slices\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.addDisposer(this._makeSlices())\r\n        });\r\n        /**\r\n         * A [[ListTemplate]] of all slice labels in series.\r\n         *\r\n         * `labels.template` can also be used to configure slice labels.\r\n         */\r\n        Object.defineProperty(this, \"labels\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.addDisposer(this._makeLabels())\r\n        });\r\n        /**\r\n         * A [[ListTemplate]] of all slice ticks in series.\r\n         *\r\n         * `ticks.template` can also be used to configure slice ticks.\r\n         */\r\n        Object.defineProperty(this, \"ticks\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.addDisposer(this._makeTicks())\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    makeSlice(dataItem) {\r\n        const slice = this.slicesContainer.children.push(this.slices.make());\r\n        slice.on(\"fill\", () => {\r\n            this.updateLegendMarker(dataItem);\r\n        });\r\n        slice.on(\"fillPattern\", () => {\r\n            this.updateLegendMarker(dataItem);\r\n        });\r\n        slice.on(\"stroke\", () => {\r\n            this.updateLegendMarker(dataItem);\r\n        });\r\n        slice._setDataItem(dataItem);\r\n        dataItem.set(\"slice\", slice);\r\n        this.slices.push(slice);\r\n        return slice;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    makeLabel(dataItem) {\r\n        const label = this.labelsContainer.children.push(this.labels.make());\r\n        label._setDataItem(dataItem);\r\n        dataItem.set(\"label\", label);\r\n        this.labels.push(label);\r\n        return label;\r\n    }\r\n    _shouldMakeBullet(dataItem) {\r\n        if (dataItem.get(\"value\") != null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    makeTick(dataItem) {\r\n        const tick = this.ticksContainer.children.push(this.ticks.make());\r\n        tick._setDataItem(dataItem);\r\n        dataItem.set(\"tick\", tick);\r\n        this.ticks.push(tick);\r\n        return tick;\r\n    }\r\n    _afterNew() {\r\n        this.fields.push(\"category\", \"fill\");\r\n        super._afterNew();\r\n    }\r\n    _onDataClear() {\r\n        const colors = this.get(\"colors\");\r\n        if (colors) {\r\n            colors.reset();\r\n        }\r\n        const patterns = this.get(\"patterns\");\r\n        if (patterns) {\r\n            patterns.reset();\r\n        }\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        this._lLabels = [];\r\n        this._rLabels = [];\r\n        this._hLabels = [];\r\n        if (this._valuesDirty) {\r\n            let sum = 0;\r\n            let absSum = 0;\r\n            let valueHigh = 0;\r\n            let valueLow = Infinity;\r\n            let count = 0;\r\n            $array.each(this._dataItems, (dataItem) => {\r\n                let valueWorking = dataItem.get(\"valueWorking\", 0);\r\n                sum += valueWorking;\r\n                absSum += Math.abs(valueWorking);\r\n            });\r\n            $array.each(this._dataItems, (dataItem) => {\r\n                let value = dataItem.get(\"valueWorking\", 0);\r\n                if (value > valueHigh) {\r\n                    valueHigh = value;\r\n                }\r\n                if (value < valueLow) {\r\n                    valueLow = value;\r\n                }\r\n                count++;\r\n                let percentTotal = value / absSum;\r\n                if (absSum == 0) {\r\n                    percentTotal = 0;\r\n                }\r\n                dataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\r\n            });\r\n            this.setPrivateRaw(\"valueLow\", valueLow);\r\n            this.setPrivateRaw(\"valueHigh\", valueHigh);\r\n            this.setPrivateRaw(\"valueSum\", sum);\r\n            this.setPrivateRaw(\"valueAverage\", sum / count);\r\n            this.setPrivateRaw(\"valueAbsoluteSum\", absSum);\r\n        }\r\n    }\r\n    /**\r\n     * Shows hidden series.\r\n     *\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Animation promise\r\n     */\r\n    show(duration) {\r\n        const _super = Object.create(null, {\r\n            show: { get: () => super.show }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let promises = [];\r\n            promises.push(_super.show.call(this, duration));\r\n            promises.push(this._sequencedShowHide(true, duration));\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n    /**\r\n     * Hide whole series.\r\n     *\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Animation promise\r\n     */\r\n    hide(duration) {\r\n        const _super = Object.create(null, {\r\n            hide: { get: () => super.hide }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let promises = [];\r\n            promises.push(_super.hide.call(this, duration));\r\n            promises.push(this._sequencedShowHide(false, duration));\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    _updateChildren() {\r\n        super._updateChildren();\r\n        if (this._valuesDirty) {\r\n            $array.each(this._dataItems, (dataItem) => {\r\n                dataItem.get(\"label\").text.markDirtyText();\r\n            });\r\n        }\r\n        if (this.isDirty(\"legendLabelText\") || this.isDirty(\"legendValueText\")) {\r\n            $array.each(this._dataItems, (dataItem) => {\r\n                this.updateLegendValue(dataItem);\r\n            });\r\n        }\r\n        this._arrange();\r\n    }\r\n    _arrange() {\r\n        this._arrangeDown(this._lLabels);\r\n        this._arrangeUp(this._lLabels);\r\n        this._arrangeDown(this._rLabels);\r\n        this._arrangeUp(this._rLabels);\r\n        this._arrangeLeft(this._hLabels);\r\n        this._arrangeRight(this._hLabels);\r\n        $array.each(this.dataItems, (dataItem) => {\r\n            this._updateTick(dataItem);\r\n        });\r\n    }\r\n    _afterChanged() {\r\n        super._afterChanged();\r\n        this._arrange();\r\n    }\r\n    processDataItem(dataItem) {\r\n        super.processDataItem(dataItem);\r\n        if (dataItem.get(\"fill\") == null) {\r\n            let colors = this.get(\"colors\");\r\n            if (colors) {\r\n                dataItem.setRaw(\"fill\", colors.next());\r\n            }\r\n        }\r\n        if (dataItem.get(\"fillPattern\") == null) {\r\n            let patterns = this.get(\"patterns\");\r\n            if (patterns) {\r\n                dataItem.setRaw(\"fillPattern\", patterns.next());\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Shows series's data item.\r\n     *\r\n     * @param   dataItem  Data item\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Promise\r\n     */\r\n    showDataItem(dataItem, duration) {\r\n        const _super = Object.create(null, {\r\n            showDataItem: { get: () => super.showDataItem }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const promises = [_super.showDataItem.call(this, dataItem, duration)];\r\n            if (!$type.isNumber(duration)) {\r\n                duration = this.get(\"stateAnimationDuration\", 0);\r\n            }\r\n            const easing = this.get(\"stateAnimationEasing\");\r\n            let value = dataItem.get(\"value\");\r\n            const animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\r\n            if (animation) {\r\n                promises.push(animation.waitForStop());\r\n            }\r\n            const tick = dataItem.get(\"tick\");\r\n            if (tick) {\r\n                promises.push(tick.show(duration));\r\n            }\r\n            const label = dataItem.get(\"label\");\r\n            if (label) {\r\n                promises.push(label.show(duration));\r\n            }\r\n            const slice = dataItem.get(\"slice\");\r\n            if (slice) {\r\n                promises.push(slice.show(duration));\r\n            }\r\n            if (slice.get(\"active\")) {\r\n                slice.states.applyAnimate(\"active\");\r\n            }\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n    /**\r\n     * Hides series's data item.\r\n     *\r\n     * @param   dataItem  Data item\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Promise\r\n     */\r\n    hideDataItem(dataItem, duration) {\r\n        const _super = Object.create(null, {\r\n            hideDataItem: { get: () => super.hideDataItem }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const promises = [_super.hideDataItem.call(this, dataItem, duration)];\r\n            const hiddenState = this.states.create(\"hidden\", {});\r\n            if (!$type.isNumber(duration)) {\r\n                duration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\r\n            }\r\n            const easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\r\n            const animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\r\n            if (animation) {\r\n                promises.push(animation.waitForStop());\r\n            }\r\n            const tick = dataItem.get(\"tick\");\r\n            if (tick) {\r\n                promises.push(tick.hide(duration));\r\n            }\r\n            const label = dataItem.get(\"label\");\r\n            if (label) {\r\n                promises.push(label.hide(duration));\r\n            }\r\n            const slice = dataItem.get(\"slice\");\r\n            slice.hideTooltip();\r\n            if (slice) {\r\n                promises.push(slice.hide(duration));\r\n            }\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    disposeDataItem(dataItem) {\r\n        super.disposeDataItem(dataItem);\r\n        let label = dataItem.get(\"label\");\r\n        if (label) {\r\n            this.labels.removeValue(label);\r\n            label.dispose();\r\n        }\r\n        let tick = dataItem.get(\"tick\");\r\n        if (tick) {\r\n            this.ticks.removeValue(tick);\r\n            tick.dispose();\r\n        }\r\n        let slice = dataItem.get(\"slice\");\r\n        if (slice) {\r\n            this.slices.removeValue(slice);\r\n            slice.dispose();\r\n        }\r\n    }\r\n    /**\r\n     * Triggers hover on a series data item.\r\n     *\r\n     * @since 5.0.7\r\n     * @param  dataItem  Target data item\r\n     */\r\n    hoverDataItem(dataItem) {\r\n        const slice = dataItem.get(\"slice\");\r\n        if (slice && !slice.isHidden()) {\r\n            slice.hover();\r\n        }\r\n    }\r\n    /**\r\n     * Triggers un-hover on a series data item.\r\n     *\r\n     * @since 5.0.7\r\n     * @param  dataItem  Target data item\r\n     */\r\n    unhoverDataItem(dataItem) {\r\n        const slice = dataItem.get(\"slice\");\r\n        if (slice) {\r\n            slice.unhover();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    updateLegendMarker(dataItem) {\r\n        if (dataItem) {\r\n            const slice = dataItem.get(\"slice\");\r\n            if (slice) {\r\n                const legendDataItem = dataItem.get(\"legendDataItem\");\r\n                if (legendDataItem) {\r\n                    const markerRectangle = legendDataItem.get(\"markerRectangle\");\r\n                    $array.each(visualSettings, (setting) => {\r\n                        if (slice.get(setting) != null) {\r\n                            markerRectangle.set(setting, slice.get(setting));\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _arrangeDown(labels) {\r\n        if (labels) {\r\n            let next = this._getNextDown();\r\n            labels.sort((a, b) => {\r\n                if (a.y > b.y) {\r\n                    return 1;\r\n                }\r\n                else if (a.y < b.y) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n            $array.each(labels, (l) => {\r\n                const bounds = l.label.adjustedLocalBounds();\r\n                let labelTop = bounds.top;\r\n                if (l.y + labelTop < next) {\r\n                    l.y = next - labelTop;\r\n                }\r\n                l.label.set(\"y\", l.y);\r\n                next = l.y + bounds.bottom;\r\n            });\r\n        }\r\n    }\r\n    _getNextUp() {\r\n        return this.labelsContainer.maxHeight();\r\n    }\r\n    _getNextDown() {\r\n        return 0;\r\n    }\r\n    _arrangeUp(labels) {\r\n        if (labels) {\r\n            let next = this._getNextUp();\r\n            labels.sort((a, b) => {\r\n                if (a.y < b.y) {\r\n                    return 1;\r\n                }\r\n                else if (a.y > b.y) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n            $array.each(labels, (l) => {\r\n                const bounds = l.label.adjustedLocalBounds();\r\n                let labelBottom = bounds.bottom;\r\n                if (l.y + labelBottom > next) {\r\n                    l.y = next - labelBottom;\r\n                }\r\n                l.label.set(\"y\", l.y);\r\n                next = l.y + bounds.top;\r\n            });\r\n        }\r\n    }\r\n    _arrangeRight(labels) {\r\n        if (labels) {\r\n            let next = 0;\r\n            labels.sort((a, b) => {\r\n                if (a.y > b.y) {\r\n                    return 1;\r\n                }\r\n                else if (a.y < b.y) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n            $array.each(labels, (l) => {\r\n                const bounds = l.label.adjustedLocalBounds();\r\n                let labelLeft = bounds.left;\r\n                if (l.y + labelLeft < next) {\r\n                    l.y = next - labelLeft;\r\n                }\r\n                l.label.set(\"x\", l.y);\r\n                next = l.y + bounds.right;\r\n            });\r\n        }\r\n    }\r\n    _arrangeLeft(labels) {\r\n        if (labels) {\r\n            let next = this.labelsContainer.maxWidth();\r\n            labels.sort((a, b) => {\r\n                if (a.y < b.y) {\r\n                    return 1;\r\n                }\r\n                else if (a.y > b.y) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n            $array.each(labels, (l) => {\r\n                const bounds = l.label.adjustedLocalBounds();\r\n                let labelRight = bounds.right;\r\n                if (l.y + labelRight > next) {\r\n                    l.y = next - labelRight;\r\n                }\r\n                l.label.set(\"x\", l.y);\r\n                next = l.y + bounds.left;\r\n            });\r\n        }\r\n    }\r\n    _updateSize() {\r\n        super._updateSize();\r\n        this.markDirty();\r\n    }\r\n    _updateTick(_dataItem) {\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            chart.series.removeValue(this);\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(PercentSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PercentSeries\"\r\n});\r\nObject.defineProperty(PercentSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: Series.classNames.concat([PercentSeries.className])\r\n});\r\n", "import { Percent } from \"../../core/util/Percent\";\r\nimport { PercentChart } from \"../percent/PercentChart\";\r\nimport { p50 } from \"../../core/util/Percent\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\nimport * as $math from \"../../core/util/Math\";\r\n/**\r\n * Creates a pie chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_maxRadius\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 1\r\n        });\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this.seriesContainer.setAll({ x: p50, y: p50 });\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        const chartContainer = this.chartContainer;\r\n        const w = chartContainer.innerWidth();\r\n        const h = chartContainer.innerHeight();\r\n        const startAngle = this.get(\"startAngle\", 0);\r\n        const endAngle = this.get(\"endAngle\", 0);\r\n        const innerRadius = this.get(\"innerRadius\");\r\n        let bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\r\n        const wr = w / (bounds.right - bounds.left);\r\n        const hr = h / (bounds.bottom - bounds.top);\r\n        let innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\r\n        if (innerRadius instanceof Percent) {\r\n            let value = innerRadius.value;\r\n            let mr = Math.min(wr, hr);\r\n            value = Math.max(mr * value, mr - Math.min(h, w)) / mr;\r\n            innerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\r\n            this.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\r\n        }\r\n        bounds = $math.mergeBounds([bounds, innerBounds]);\r\n        const prevRadius = this._maxRadius;\r\n        this._maxRadius = Math.min(wr, hr);\r\n        const radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\r\n        this.seriesContainer.setAll({\r\n            dy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\r\n        });\r\n        if (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\r\n            this.series.each((series) => {\r\n                series._markDirtyKey(\"startAngle\");\r\n            });\r\n        }\r\n        if (this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")) {\r\n            this.series.each((series) => {\r\n                series._markDirtyKey(\"innerRadius\");\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Returns outer radius in pixels.\r\n     *\r\n     * If optional series parameter is passed in, it will return outer radius\r\n     * of that particular series.\r\n     *\r\n     * @param   series  Series\r\n     * @return          Radius in pixels\r\n     */\r\n    radius(series) {\r\n        let radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\r\n        let innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\r\n        if (series) {\r\n            let index = this.series.indexOf(series);\r\n            let length = this.series.length;\r\n            let seriesRadius = series.get(\"radius\");\r\n            if (seriesRadius != null) {\r\n                return innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\r\n            }\r\n            else {\r\n                return innerRadius + (radius - innerRadius) / length * (index + 1);\r\n            }\r\n        }\r\n        return radius;\r\n    }\r\n    /**\r\n     * Returns inner radius in pixels.\r\n     *\r\n     * If optional series parameter is passed in, it will return inner radius\r\n     * of that particular series.\r\n     *\r\n     * @param   series  Series\r\n     * @return          Radius in pixels\r\n     */\r\n    innerRadius(series) {\r\n        const radius = this.radius();\r\n        let innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\r\n        if (innerRadius < 0) {\r\n            innerRadius = radius + innerRadius;\r\n        }\r\n        if (series) {\r\n            let index = this.series.indexOf(series);\r\n            let length = this.series.length;\r\n            let seriesInnerRadius = series.get(\"innerRadius\");\r\n            if (seriesInnerRadius != null) {\r\n                return innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\r\n            }\r\n            else {\r\n                return innerRadius + (radius - innerRadius) / length * index;\r\n            }\r\n        }\r\n        return innerRadius;\r\n    }\r\n    _updateSize() {\r\n        super._updateSize();\r\n        this.markDirtyKey(\"radius\");\r\n    }\r\n}\r\nObject.defineProperty(PieChart, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PieChart\"\r\n});\r\nObject.defineProperty(PieChart, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: PercentChart.classNames.concat([PieChart.className])\r\n});\r\n", "import { PercentSeries } from \"../percent/PercentSeries\";\r\nimport { Template } from \"../../core/util/Template\";\r\nimport { Slice } from \"../../core/render/Slice\";\r\nimport { Tick } from \"../../core/render/Tick\";\r\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\r\nimport { ListTemplate } from \"../../core/util/List\";\r\nimport { p100 } from \"../../core/util/Percent\";\r\nimport * as $array from \"../../core/util/Array\";\r\nimport * as $math from \"../../core/util/Math\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n/**\r\n * Creates a series for a [[PieChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n    _makeSlices() {\r\n        return new ListTemplate(Template.new({}), () => Slice._new(this._root, {\r\n            themeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\r\n        }, [this.slices.template]));\r\n    }\r\n    _makeLabels() {\r\n        return new ListTemplate(Template.new({}), () => RadialLabel._new(this._root, {\r\n            themeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"pie\", \"series\"])\r\n        }, [this.labels.template]));\r\n    }\r\n    _makeTicks() {\r\n        return new ListTemplate(Template.new({}), () => Tick._new(this._root, {\r\n            themeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [\"pie\", \"series\"])\r\n        }, [this.ticks.template]));\r\n    }\r\n    processDataItem(dataItem) {\r\n        super.processDataItem(dataItem);\r\n        const slice = this.makeSlice(dataItem);\r\n        slice.on(\"scale\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        slice.on(\"shiftRadius\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        slice.events.on(\"positionchanged\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        const label = this.makeLabel(dataItem);\r\n        label.events.on(\"positionchanged\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        this.makeTick(dataItem);\r\n        slice.events.on(\"positionchanged\", () => {\r\n            label.markDirty();\r\n        });\r\n    }\r\n    _getNextUp() {\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            return chart._maxRadius;\r\n        }\r\n        return this.labelsContainer.maxHeight() / 2;\r\n    }\r\n    _getNextDown() {\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            return -chart._maxRadius;\r\n        }\r\n        return -this.labelsContainer.maxHeight() / 2;\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            if (this.isDirty(\"alignLabels\")) {\r\n                let labelsTemplate = this.labels.template;\r\n                if (this.get(\"alignLabels\")) {\r\n                    labelsTemplate.set(\"textType\", \"aligned\");\r\n                }\r\n                else {\r\n                    let textType = labelsTemplate.get(\"textType\");\r\n                    if (textType == null || textType == \"aligned\") {\r\n                        labelsTemplate.set(\"textType\", \"adjusted\");\r\n                    }\r\n                }\r\n            }\r\n            if (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || this.isDirty(\"alignLabels\")) {\r\n                this.markDirtyBounds();\r\n                const startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\r\n                const endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\r\n                const arc = endAngle - startAngle;\r\n                let currentAngle = startAngle;\r\n                const radius = chart.radius(this);\r\n                this.setPrivateRaw(\"radius\", radius);\r\n                let innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\r\n                if (innerRadius < 0) {\r\n                    innerRadius = radius + innerRadius;\r\n                }\r\n                //if (radius > 0) {\r\n                $array.each(this._dataItems, (dataItem) => {\r\n                    this.updateLegendValue(dataItem);\r\n                    let currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\r\n                    const slice = dataItem.get(\"slice\");\r\n                    if (slice) {\r\n                        slice.set(\"radius\", radius);\r\n                        slice.set(\"innerRadius\", innerRadius);\r\n                        slice.set(\"startAngle\", currentAngle);\r\n                        slice.set(\"arc\", currentArc);\r\n                        const color = dataItem.get(\"fill\");\r\n                        slice._setDefault(\"fill\", color);\r\n                        slice._setDefault(\"stroke\", color);\r\n                        const fillPattern = dataItem.get(\"fillPattern\");\r\n                        slice._setDefault(\"fillPattern\", fillPattern);\r\n                    }\r\n                    let middleAngle = $math.normalizeAngle(currentAngle + currentArc / 2);\r\n                    const label = dataItem.get(\"label\");\r\n                    if (label) {\r\n                        label.setPrivate(\"radius\", radius);\r\n                        label.setPrivate(\"innerRadius\", innerRadius);\r\n                        label.set(\"labelAngle\", middleAngle);\r\n                        if (label.get(\"textType\") == \"aligned\") {\r\n                            let labelRadius = radius + label.get(\"radius\", 0);\r\n                            let y = radius * $math.sin(middleAngle);\r\n                            if (middleAngle > 90 && middleAngle <= 270) {\r\n                                if (!label.isHidden() && !label.isHiding()) {\r\n                                    this._lLabels.push({ label: label, y: y });\r\n                                }\r\n                                labelRadius *= -1;\r\n                                labelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\r\n                                label.set(\"centerX\", p100);\r\n                                label.setPrivateRaw(\"left\", true);\r\n                            }\r\n                            else {\r\n                                if (!label.isHidden() && !label.isHiding()) {\r\n                                    this._rLabels.push({ label: label, y: y });\r\n                                }\r\n                                labelRadius += this.labelsContainer.get(\"paddingRight\", 0);\r\n                                label.set(\"centerX\", 0);\r\n                                label.setPrivateRaw(\"left\", false);\r\n                            }\r\n                            label.set(\"x\", labelRadius);\r\n                            label.set(\"y\", radius * $math.sin(middleAngle));\r\n                        }\r\n                    }\r\n                    currentAngle += currentArc;\r\n                    this._updateTick(dataItem);\r\n                });\r\n                //}\r\n            }\r\n        }\r\n    }\r\n    _updateTick(dataItem) {\r\n        const tick = dataItem.get(\"tick\");\r\n        const label = dataItem.get(\"label\");\r\n        const slice = dataItem.get(\"slice\");\r\n        const location = tick.get(\"location\", 1);\r\n        if (tick && label && slice) {\r\n            const radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\r\n            const labelAngle = label.get(\"labelAngle\", 0);\r\n            const cos = $math.cos(labelAngle);\r\n            const sin = $math.sin(labelAngle);\r\n            const labelsContainer = this.labelsContainer;\r\n            const pl = labelsContainer.get(\"paddingLeft\", 0);\r\n            const pr = labelsContainer.get(\"paddingRight\", 0);\r\n            let x = 0;\r\n            let y = 0;\r\n            x = label.x();\r\n            y = label.y();\r\n            let points = [];\r\n            if (x != 0 || y != 0) {\r\n                if (label.get(\"textType\") == \"circular\") {\r\n                    const labelRadius = label.radius() - label.get(\"paddingBottom\", 0);\r\n                    const labelAngle = label.get(\"labelAngle\", 0);\r\n                    x = labelRadius * $math.cos(labelAngle);\r\n                    y = labelRadius * $math.sin(labelAngle);\r\n                }\r\n                let dx = -pr;\r\n                if (label.getPrivate(\"left\")) {\r\n                    dx = pl;\r\n                }\r\n                points = [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }];\r\n            }\r\n            tick.set(\"points\", points);\r\n        }\r\n    }\r\n    _positionBullet(bullet) {\r\n        const sprite = bullet.get(\"sprite\");\r\n        if (sprite) {\r\n            const dataItem = sprite.dataItem;\r\n            const slice = dataItem.get(\"slice\");\r\n            if (slice) {\r\n                const innerRadius = slice.get(\"innerRadius\", 0);\r\n                const radius = slice.get(\"radius\", 0);\r\n                const startAngle = slice.get(\"startAngle\", 0);\r\n                const arc = slice.get(\"arc\", 0);\r\n                const locationX = bullet.get(\"locationX\", 0.5);\r\n                const locationY = bullet.get(\"locationY\", 0.5);\r\n                const angle = startAngle + arc * locationX;\r\n                const r = innerRadius + (radius - innerRadius) * locationY;\r\n                sprite.setAll({ x: $math.cos(angle) * r, y: $math.sin(angle) * r });\r\n            }\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(PieSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PieSeries\"\r\n});\r\nObject.defineProperty(PieSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: PercentSeries.classNames.concat([PieSeries.className])\r\n});\r\n", "import { Graphics } from \"../../core/render/Graphics\";\r\nimport * as $math from \"../../core/util/Math\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n/**\r\n * Draws a slice for [[FunnelSeries]].\r\n */\r\nexport class FunnelSlice extends Graphics {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_projectionDirty\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n        Object.defineProperty(this, \"_tlx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_tly\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_trx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_try\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_blx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_bly\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_brx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_bry\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_cprx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_cplx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_cpry\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_cply\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this.set(\"draw\", (display) => {\r\n            const w = this.width();\r\n            const h = this.height();\r\n            let minSide = Math.min(w, h) / 2;\r\n            let crtl = $utils.relativeToValue(this.get(\"cornerRadiusTL\", 0), minSide);\r\n            let crtr = $utils.relativeToValue(this.get(\"cornerRadiusTR\", 0), minSide);\r\n            let crbr = $utils.relativeToValue(this.get(\"cornerRadiusBR\", 0), minSide);\r\n            let crbl = $utils.relativeToValue(this.get(\"cornerRadiusBL\", 0), minSide);\r\n            let trX = this._trx;\r\n            let trY = this._try;\r\n            let tlX = this._tlx;\r\n            let tlY = this._tly;\r\n            let brX = this._brx;\r\n            let brY = this._bry;\r\n            let blX = this._blx;\r\n            let blY = this._bly;\r\n            if (trY == tlY) {\r\n                trY = trY - 0.01;\r\n            }\r\n            if (brY == blY) {\r\n                brY = brY - 0.01;\r\n            }\r\n            let tlAngle = $math.getAngle({ x: tlX, y: tlY }, { x: trX, y: trY });\r\n            let trAngle = $math.getAngle({ x: trX, y: trY }, { x: brX, y: brY });\r\n            let brAngle = $math.getAngle({ x: brX, y: brY }, { x: blX, y: blY });\r\n            let blAngle = $math.getAngle({ x: blX, y: blY }, { x: tlX, y: tlY });\r\n            if (this.get(\"orientation\") == \"horizontal\") {\r\n                crtl = Math.min(crtl, Math.abs(tlY - trY) / 2);\r\n                crtr = Math.min(crtr, Math.abs(tlY - trY) / 2);\r\n                crbr = Math.min(crbr, Math.abs(blY - brY) / 2);\r\n                crbl = Math.min(crbl, Math.abs(blY - brY) / 2);\r\n            }\r\n            else {\r\n                crtl = Math.min(crtl, Math.abs(tlX - trX) / 2);\r\n                crtr = Math.min(crtr, Math.abs(tlX - trX) / 2);\r\n                crbr = Math.min(crbr, Math.abs(blX - brX) / 2);\r\n                crbl = Math.min(crbl, Math.abs(blX - brX) / 2);\r\n            }\r\n            const tlX1 = tlX - crtl * $math.tan((tlAngle - blAngle) / 2) * $math.cos((blAngle));\r\n            const tlY1 = tlY - crtl * $math.tan((tlAngle - blAngle) / 2) * $math.sin((blAngle));\r\n            const tlX2 = tlX - crtl * $math.tan((blAngle - tlAngle) / 2) * $math.cos((tlAngle));\r\n            const tlY2 = tlY - crtl * $math.tan((blAngle - tlAngle) / 2) * $math.sin((tlAngle));\r\n            const trX1 = trX - crtr * $math.tan((trAngle - tlAngle) / 2) * $math.cos((tlAngle));\r\n            const trY1 = trY - crtr * $math.tan((trAngle - tlAngle) / 2) * $math.sin((tlAngle));\r\n            const trX2 = trX - crtr * $math.tan((tlAngle - trAngle) / 2) * $math.cos((trAngle));\r\n            const trY2 = trY - crtr * $math.tan((tlAngle - trAngle) / 2) * $math.sin((trAngle));\r\n            const brX1 = brX - crbr * $math.tan((brAngle - trAngle) / 2) * $math.cos((trAngle));\r\n            const brY1 = brY - crbr * $math.tan((brAngle - trAngle) / 2) * $math.sin((trAngle));\r\n            const brX2 = brX - crbr * $math.tan((trAngle - brAngle) / 2) * $math.cos((brAngle));\r\n            const brY2 = brY - crbr * $math.tan((trAngle - brAngle) / 2) * $math.sin((brAngle));\r\n            const blX1 = blX - crbl * $math.tan((blAngle - brAngle) / 2) * $math.cos((brAngle));\r\n            const blY1 = blY - crbl * $math.tan((blAngle - brAngle) / 2) * $math.sin((brAngle));\r\n            const blX2 = blX - crbl * $math.tan((brAngle - blAngle) / 2) * $math.cos((blAngle));\r\n            const blY2 = blY - crbl * $math.tan((brAngle - blAngle) / 2) * $math.sin((blAngle));\r\n            display.moveTo(tlX2, tlY2);\r\n            display.lineTo(trX1, trY1);\r\n            display.arcTo(trX, trY, trX2, trY2, crtr);\r\n            display.quadraticCurveTo(this._cprx, this._cpry, brX1, brY1);\r\n            display.arcTo(brX, brY, brX2, brY2, crbr);\r\n            display.lineTo(blX1, blY1);\r\n            display.arcTo(blX, blY, blX2, blY2, crbl);\r\n            display.quadraticCurveTo(this._cplx, this._cply, tlX1, tlY1);\r\n            display.arcTo(tlX, tlY, tlX2, tlY2, crtl);\r\n        });\r\n    }\r\n    getPoint(locationX, locationY) {\r\n        let w = this.width();\r\n        let h = this.height();\r\n        const tw = this.get(\"topWidth\", 0);\r\n        const bw = this.get(\"bottomWidth\", 0);\r\n        if (this.get(\"orientation\") == \"vertical\") {\r\n            let tlx = -tw / 2;\r\n            let trx = tw / 2;\r\n            let brx = bw / 2;\r\n            let blx = -bw / 2;\r\n            let mlx = tlx + (blx - tlx) * locationY;\r\n            let mrx = trx + (brx - trx) * locationY;\r\n            return { x: mlx + (mrx - mlx) * locationX, y: h * locationY };\r\n        }\r\n        else {\r\n            let tlx = -tw / 2;\r\n            let trx = tw / 2;\r\n            let brx = bw / 2;\r\n            let blx = -bw / 2;\r\n            let mlx = tlx + (blx - tlx) * locationX;\r\n            let mrx = trx + (brx - trx) * locationX;\r\n            return { x: w * locationX, y: mlx + (mrx - mlx) * locationY };\r\n        }\r\n    }\r\n    _changed() {\r\n        if (this.isDirty(\"topWidth\") || this.isDirty(\"bottomWidth\") || this.isDirty(\"expandDistance\") || this.isDirty(\"orientation\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\r\n            const w = this.width();\r\n            const h = this.height();\r\n            const tw = this.get(\"topWidth\", 0);\r\n            const bw = this.get(\"bottomWidth\", 0);\r\n            this._clear = true;\r\n            let ed = this.get(\"expandDistance\", 0);\r\n            if (this.get(\"orientation\") == \"vertical\") {\r\n                this._tlx = -tw / 2;\r\n                this._tly = 0;\r\n                this._trx = tw / 2;\r\n                this._try = 0;\r\n                this._brx = bw / 2;\r\n                this._bry = h;\r\n                this._blx = -bw / 2;\r\n                this._bly = h;\r\n                this._cprx = this._trx + (this._brx - this._trx) / 2 + ed * h,\r\n                    this._cpry = this._try + 0.5 * h;\r\n                this._cplx = this._tlx + (this._blx - this._tlx) / 2 - ed * h;\r\n                this._cply = this._tly + 0.5 * h;\r\n            }\r\n            else {\r\n                this._tly = tw / 2;\r\n                this._tlx = 0;\r\n                this._try = -tw / 2;\r\n                this._trx = 0;\r\n                this._bry = -bw / 2;\r\n                this._brx = w;\r\n                this._bly = bw / 2;\r\n                this._blx = w;\r\n                this._cpry = this._try + (this._bry - this._try) / 2 - ed * w,\r\n                    this._cprx = this._trx + 0.5 * w;\r\n                this._cply = this._tly + (this._bly - this._tly) / 2 + ed * w;\r\n                this._cplx = this._tlx + 0.5 * w;\r\n            }\r\n        }\r\n        super._changed();\r\n    }\r\n}\r\nObject.defineProperty(FunnelSlice, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"FunnelSlice\"\r\n});\r\nObject.defineProperty(FunnelSlice, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: Graphics.classNames.concat([FunnelSlice.className])\r\n});\r\n", "import { __awaiter } from \"tslib\";\r\nimport { PercentSeries } from \"../percent/PercentSeries\";\r\nimport { Template } from \"../../core/util/Template\";\r\nimport { ListTemplate } from \"../../core/util/List\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { Tick } from \"../../core/render/Tick\";\r\nimport { Label } from \"../../core/render/Label\";\r\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\r\nimport * as $array from \"../../core/util/Array\";\r\nimport * as $type from \"../../core/util/Type\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n/**\r\n * Creates a funnel series for use in a [[SlicedChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/} for more info\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_tag\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: \"funnel\"\r\n        });\r\n        /**\r\n         * A [[ListTemplate]] of all slice links in series.\r\n         *\r\n         * `links.template` can also be used to configure slice links.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_links} for more info\r\n         */\r\n        Object.defineProperty(this, \"links\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.addDisposer(this._makeLinks())\r\n        });\r\n        Object.defineProperty(this, \"_total\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_count\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_nextCoord\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_opposite\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n    }\r\n    _makeSlices() {\r\n        return new ListTemplate(Template.new({}), () => FunnelSlice._new(this._root, {\r\n            themeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [this._tag, \"series\", \"slice\", this.get(\"orientation\")])\r\n        }, [this.slices.template]));\r\n    }\r\n    _makeLabels() {\r\n        return new ListTemplate(Template.new({}), () => Label._new(this._root, {\r\n            themeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [this._tag, \"series\", \"label\", this.get(\"orientation\")])\r\n        }, [this.labels.template]));\r\n    }\r\n    _makeTicks() {\r\n        return new ListTemplate(Template.new({}), () => Tick._new(this._root, {\r\n            themeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [this._tag, \"series\", \"tick\", this.get(\"orientation\")])\r\n        }, [this.ticks.template]));\r\n    }\r\n    _makeLinks() {\r\n        return new ListTemplate(Template.new({}), () => FunnelSlice._new(this._root, {\r\n            themeTags: $utils.mergeTags(this.links.template.get(\"themeTags\", []), [this._tag, \"series\", \"link\", this.get(\"orientation\")])\r\n        }, [this.links.template]));\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    makeLink(dataItem) {\r\n        const link = this.slicesContainer.children.push(this.links.make());\r\n        link._setDataItem(dataItem);\r\n        dataItem.set(\"link\", link);\r\n        this.links.push(link);\r\n        return link;\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        const slicesContainer = this.slicesContainer;\r\n        slicesContainer.setAll({ isMeasured: true, position: \"relative\", width: percent(100), height: percent(100) });\r\n        slicesContainer.onPrivate(\"width\", () => {\r\n            this.markDirtySize();\r\n        });\r\n        slicesContainer.onPrivate(\"height\", () => {\r\n            this.markDirtySize();\r\n        });\r\n        if (this.get(\"orientation\") == \"vertical\") {\r\n            this.set(\"layout\", this._root.horizontalLayout);\r\n        }\r\n        else {\r\n            this.set(\"layout\", this._root.verticalLayout);\r\n        }\r\n    }\r\n    processDataItem(dataItem) {\r\n        super.processDataItem(dataItem);\r\n        const slice = this.makeSlice(dataItem);\r\n        slice._setDataItem(dataItem);\r\n        dataItem.set(\"slice\", slice);\r\n        this.makeLink(dataItem);\r\n        const label = this.makeLabel(dataItem);\r\n        label.on(\"x\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        label.on(\"y\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        this.makeTick(dataItem);\r\n        slice.events.on(\"positionchanged\", () => {\r\n            label.markDirty();\r\n        });\r\n        slice.events.on(\"boundschanged\", () => {\r\n            const dataItem = slice.dataItem;\r\n            if (dataItem) {\r\n                this._updateTick(dataItem);\r\n            }\r\n        });\r\n    }\r\n    _updateChildren() {\r\n        this._opposite = false;\r\n        if (this.children.indexOf(this.labelsContainer) == 0) {\r\n            this._opposite = true;\r\n        }\r\n        let total = 0;\r\n        let count = 0;\r\n        $array.each(this.dataItems, (dataItem) => {\r\n            const value = dataItem.get(\"value\");\r\n            if ($type.isNumber(value)) {\r\n                count++;\r\n                if (value > 0) {\r\n                    total += Math.abs(dataItem.get(\"valueWorking\", value) / value);\r\n                }\r\n                else {\r\n                    if (this.get(\"ignoreZeroValues\", false)) {\r\n                        count--;\r\n                    }\r\n                    else {\r\n                        if (dataItem.isHidden()) {\r\n                            count--;\r\n                        }\r\n                        else {\r\n                            total += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this._total = 1 / count * total;\r\n        this._count = count;\r\n        if (this.isDirty(\"alignLabels\")) {\r\n            this._fixLayout();\r\n        }\r\n        if (this._total > 0 && (this._valuesDirty || this._sizeDirty)) {\r\n            const slicesContainer = this.slicesContainer;\r\n            let h;\r\n            if (this.get(\"orientation\") == \"vertical\") {\r\n                h = slicesContainer.innerHeight();\r\n            }\r\n            else {\r\n                h = slicesContainer.innerWidth();\r\n            }\r\n            this._nextCoord = this.get(\"startLocation\", 0) * h;\r\n            this.markDirtyBounds();\r\n            let i = 0;\r\n            $array.each(this._dataItems, (dataItem) => {\r\n                this.updateLegendValue(dataItem);\r\n                dataItem.set(\"index\", i);\r\n                i++;\r\n                const slice = dataItem.get(\"slice\");\r\n                const tick = dataItem.get(\"tick\");\r\n                const label = dataItem.get(\"label\");\r\n                const link = dataItem.get(\"link\");\r\n                const color = dataItem.get(\"fill\");\r\n                const fillPattern = dataItem.get(\"fillPattern\");\r\n                slice._setDefault(\"fill\", color);\r\n                slice._setDefault(\"stroke\", color);\r\n                slice._setDefault(\"fillPattern\", fillPattern);\r\n                link._setDefault(\"fill\", color);\r\n                link._setDefault(\"stroke\", color);\r\n                const value = dataItem.get(\"value\");\r\n                if ($type.isNumber(value)) {\r\n                    if (value == 0 && this.get(\"ignoreZeroValues\")) {\r\n                        slice.setPrivate(\"visible\", false);\r\n                        tick.setPrivate(\"visible\", false);\r\n                        label.setPrivate(\"visible\", false);\r\n                    }\r\n                    else {\r\n                        slice.setPrivate(\"visible\", true);\r\n                        tick.setPrivate(\"visible\", true);\r\n                        label.setPrivate(\"visible\", true);\r\n                        this.decorateSlice(dataItem);\r\n                        if (this.isLast(dataItem)) {\r\n                            link.setPrivate(\"visible\", false);\r\n                        }\r\n                        else if (!dataItem.isHidden()) {\r\n                            link.setPrivate(\"visible\", true);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        super._updateChildren();\r\n    }\r\n    _fixLayout() {\r\n        const orientation = this.get(\"orientation\");\r\n        const labelsContainer = this.labelsContainer;\r\n        const labelsTemplate = this.labels.template;\r\n        if (this.get(\"alignLabels\")) {\r\n            labelsContainer.set(\"position\", \"relative\");\r\n            labelsContainer.setAll({ isMeasured: true });\r\n            if (orientation == \"vertical\") {\r\n                this.set(\"layout\", this._root.horizontalLayout);\r\n                labelsTemplate.setAll({ centerX: p100, x: p100 });\r\n            }\r\n            else {\r\n                this.set(\"layout\", this._root.verticalLayout);\r\n                labelsTemplate.setAll({ centerX: 0, x: 0 });\r\n            }\r\n        }\r\n        else {\r\n            labelsContainer.setAll({ isMeasured: false, position: \"absolute\" });\r\n            if (orientation == \"vertical\") {\r\n                labelsContainer.setAll({ x: p50 });\r\n                labelsTemplate.setAll({ centerX: p50, x: 0 });\r\n            }\r\n            else {\r\n                labelsContainer.setAll({ y: p50 });\r\n                labelsTemplate.setAll({ centerX: p50, y: 0 });\r\n            }\r\n        }\r\n        this.markDirtySize();\r\n    }\r\n    getNextValue(dataItem) {\r\n        let index = dataItem.get(\"index\");\r\n        let nextValue = dataItem.get(\"valueWorking\", 0);\r\n        if (index < this.dataItems.length - 1) {\r\n            let nextItem = this.dataItems[index + 1];\r\n            nextValue = nextItem.get(\"valueWorking\", 0);\r\n            if (nextItem.isHidden() || (nextItem.get(\"value\") == 0 && this.get(\"ignoreZeroValues\"))) {\r\n                return this.getNextValue(nextItem);\r\n            }\r\n        }\r\n        return nextValue;\r\n    }\r\n    isLast(dataItem) {\r\n        let index = dataItem.get(\"index\");\r\n        if (index == this.dataItems.length - 1) {\r\n            return true;\r\n        }\r\n        else {\r\n            for (let i = index + 1; i < this.dataItems.length; i++) {\r\n                if (!this.dataItems[i].isHidden()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    decorateSlice(dataItem) {\r\n        const orientation = this.get(\"orientation\");\r\n        const slice = dataItem.get(\"slice\");\r\n        const label = dataItem.get(\"label\");\r\n        const link = dataItem.get(\"link\");\r\n        const slicesContainer = this.slicesContainer;\r\n        let maxWidth = slicesContainer.innerWidth();\r\n        let maxHeight = slicesContainer.innerHeight();\r\n        let maxSize = maxWidth;\r\n        if (orientation == \"horizontal\") {\r\n            maxSize = maxHeight;\r\n        }\r\n        const nextValue = this.getNextValue(dataItem);\r\n        const value = dataItem.get(\"value\", 0);\r\n        const workingValue = Math.abs(dataItem.get(\"valueWorking\", value));\r\n        const bottomRatio = this.get(\"bottomRatio\", 0);\r\n        const valueHigh = this.getPrivate(\"valueHigh\", 0);\r\n        let d = 1;\r\n        if (value != 0) {\r\n            d = workingValue / Math.abs(value);\r\n        }\r\n        else {\r\n            if (dataItem.isHidden()) {\r\n                d = 0.000001;\r\n            }\r\n        }\r\n        if (this._nextCoord == Infinity) {\r\n            this._nextCoord = 0;\r\n        }\r\n        let topWidth = workingValue / valueHigh * maxSize;\r\n        let bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / valueHigh * maxSize;\r\n        slice.setAll({ topWidth, bottomWidth, orientation });\r\n        link.setAll({ topWidth: bottomWidth, bottomWidth: (workingValue - (workingValue - nextValue)) / valueHigh * maxSize, orientation });\r\n        const startLocation = this.get(\"startLocation\", 0);\r\n        const endLocation = this.get(\"endLocation\", 1);\r\n        if (orientation == \"vertical\") {\r\n            let linkHeight = link.height() * d;\r\n            maxHeight = maxHeight * (endLocation - startLocation) + linkHeight;\r\n            slice.set(\"y\", this._nextCoord);\r\n            let height = Math.min(100000, Math.max(0, maxHeight / this._count * d / this._total - linkHeight));\r\n            slice.setAll({ height, x: maxWidth / 2 });\r\n            let labelY = this._nextCoord + height / 2;\r\n            label.set(\"y\", labelY);\r\n            this._nextCoord += height + linkHeight;\r\n            link.setAll({ y: this._nextCoord - linkHeight, x: maxWidth / 2 });\r\n        }\r\n        else {\r\n            let linkHeight = link.width() * d;\r\n            maxWidth = maxWidth * (endLocation - startLocation) + linkHeight;\r\n            slice.set(\"x\", this._nextCoord);\r\n            let width = Math.min(100000, Math.max(0, maxWidth / this._count * d / this._total - linkHeight));\r\n            slice.setAll({ width, y: maxHeight / 2 });\r\n            const labelX = this._nextCoord + width / 2;\r\n            label.set(\"x\", labelX);\r\n            this._nextCoord += width + linkHeight;\r\n            link.setAll({ x: this._nextCoord - linkHeight, y: maxHeight / 2 });\r\n        }\r\n    }\r\n    /**\r\n     * Hides series's data item.\r\n     *\r\n     * @param   dataItem  Data item\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Promise\r\n     */\r\n    hideDataItem(dataItem, duration) {\r\n        const _super = Object.create(null, {\r\n            hideDataItem: { get: () => super.hideDataItem }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            dataItem.get(\"link\").hide(duration);\r\n            return _super.hideDataItem.call(this, dataItem, duration);\r\n        });\r\n    }\r\n    /**\r\n     * Shows series's data item.\r\n     *\r\n     * @param   dataItem  Data item\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Promise\r\n     */\r\n    showDataItem(dataItem, duration) {\r\n        const _super = Object.create(null, {\r\n            showDataItem: { get: () => super.showDataItem }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            dataItem.get(\"link\").show(duration);\r\n            return _super.showDataItem.call(this, dataItem, duration);\r\n        });\r\n    }\r\n    _updateTick(dataItem) {\r\n        if (this.get(\"alignLabels\")) {\r\n            const tick = dataItem.get(\"tick\");\r\n            const label = dataItem.get(\"label\");\r\n            const slice = dataItem.get(\"slice\");\r\n            if (tick && slice && label) {\r\n                const labelsContainer = this.labelsContainer;\r\n                const slicesContainer = this.slicesContainer;\r\n                let tickLocation = tick.get(\"location\", 0.5);\r\n                const lcw = labelsContainer.width();\r\n                const lch = labelsContainer.height();\r\n                const pl = labelsContainer.get(\"paddingLeft\", 0);\r\n                const pr = labelsContainer.get(\"paddingRight\", 0);\r\n                const pt = labelsContainer.get(\"paddingTop\", 0);\r\n                const pb = labelsContainer.get(\"paddingBottom\", 0);\r\n                let p0 = { x: 0, y: 0 };\r\n                let p1 = { x: 0, y: 0 };\r\n                let p2 = { x: 0, y: 0 };\r\n                if (this._opposite) {\r\n                    tickLocation = 1 - tickLocation;\r\n                }\r\n                if (this.get(\"orientation\") == \"vertical\") {\r\n                    p0 = slice.getPoint(tickLocation, 0.5);\r\n                    p0.x += slice.x() + slicesContainer.x();\r\n                    p0.y += slice.y() + slicesContainer.y();\r\n                    if (this._opposite) {\r\n                        p1.x = lcw;\r\n                        p1.y = label.y();\r\n                        p2.x = lcw - pl;\r\n                        p2.y = p1.y;\r\n                    }\r\n                    else {\r\n                        p1.x = slicesContainer.x() + slicesContainer.width();\r\n                        p1.y = label.y();\r\n                        p2.x = p1.x + lcw - label.width() - pr;\r\n                        p2.y = p1.y;\r\n                    }\r\n                }\r\n                else {\r\n                    p0 = slice.getPoint(0.5, tickLocation);\r\n                    p0.x += slice.x() + slicesContainer.x();\r\n                    p0.y += slice.y() + slicesContainer.y();\r\n                    if (this._opposite) {\r\n                        p1.y = lch;\r\n                        p1.x = label.x();\r\n                        p2.y = lch - pt;\r\n                        p2.x = p1.x;\r\n                    }\r\n                    else {\r\n                        p1.y = slicesContainer.y() + slicesContainer.height();\r\n                        p1.x = label.x();\r\n                        p2.y = p1.y + lch - label.height() - pb;\r\n                        p2.x = p1.x;\r\n                    }\r\n                }\r\n                tick.set(\"points\", [p0, p1, p2]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    disposeDataItem(dataItem) {\r\n        super.disposeDataItem(dataItem);\r\n        let link = dataItem.get(\"link\");\r\n        if (link) {\r\n            this.links.removeValue(link);\r\n            link.dispose();\r\n        }\r\n    }\r\n    _positionBullet(bullet) {\r\n        const sprite = bullet.get(\"sprite\");\r\n        if (sprite) {\r\n            const dataItem = sprite.dataItem;\r\n            const slice = dataItem.get(\"slice\");\r\n            if (slice) {\r\n                const width = slice.width();\r\n                const height = slice.height();\r\n                const locationX = bullet.get(\"locationX\", 0.5);\r\n                const locationY = bullet.get(\"locationY\", 0.5);\r\n                let dx = 0;\r\n                let dy = 0;\r\n                if (this.get(\"orientation\") == \"horizontal\") {\r\n                    dy = height / 2;\r\n                }\r\n                else {\r\n                    dx = width / 2;\r\n                }\r\n                sprite.setAll({ x: slice.x() + width * locationX - dx, y: slice.y() - dy + height * locationY });\r\n            }\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(FunnelSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"FunnelSeries\"\r\n});\r\nObject.defineProperty(FunnelSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: PercentSeries.classNames.concat([FunnelSeries.className])\r\n});\r\n", "import { FunnelSeries } from \"./FunnelSeries\";\r\nimport { p100 } from \"../../core/util/Percent\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\nimport * as $type from \"../../core/util/Type\";\r\n/**\r\n * Creates a pyramid series for use in a [[SlicedChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_tag\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: \"pyramid\"\r\n        });\r\n        Object.defineProperty(this, \"_nextSize\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        this._nextSize = undefined;\r\n    }\r\n    decorateSlice(dataItem) {\r\n        const orientation = this.get(\"orientation\");\r\n        const slicesContainer = this.slicesContainer;\r\n        const slice = dataItem.get(\"slice\");\r\n        const label = dataItem.get(\"label\");\r\n        const link = dataItem.get(\"link\");\r\n        const valueIs = this.get(\"valueIs\", \"area\");\r\n        const sum = this.getPrivate(\"valueAbsoluteSum\", 0);\r\n        if (sum == 0) {\r\n            return;\r\n        }\r\n        const startLocation = this.get(\"startLocation\", 0);\r\n        const endLocation = this.get(\"endLocation\", 1);\r\n        const tw = this.get(\"topWidth\", 0);\r\n        const bw = this.get(\"bottomWidth\", p100);\r\n        const workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\r\n        const value = dataItem.get(\"value\", 0);\r\n        let sliceHeight;\r\n        let sliceBottomWidth;\r\n        let pyramidHeight = slicesContainer.innerHeight();\r\n        let pyramidWidth = slicesContainer.innerWidth();\r\n        let linkWidth = link.width();\r\n        let linkHeight = link.height();\r\n        if (orientation == \"horizontal\") {\r\n            [pyramidWidth, pyramidHeight] = [pyramidHeight, pyramidWidth];\r\n            [linkWidth, linkHeight] = [linkHeight, linkWidth];\r\n        }\r\n        const center = pyramidWidth / 2;\r\n        let d = 1;\r\n        if (value != 0) {\r\n            d = workingValue / Math.abs(value);\r\n        }\r\n        else {\r\n            if (dataItem.isHidden()) {\r\n                d = 0.000001;\r\n            }\r\n        }\r\n        linkHeight *= d;\r\n        pyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\r\n        let topWidth = $utils.relativeToValue(tw, pyramidWidth);\r\n        if (!$type.isNumber(this._nextSize)) {\r\n            this._nextSize = topWidth;\r\n        }\r\n        let bottomWidth = $utils.relativeToValue(bw, pyramidWidth);\r\n        let sliceTopWidth = this._nextSize;\r\n        let angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n        let c = Math.tan(Math.PI / 2 - angle);\r\n        if (c == 0) {\r\n            c = 0.00000001;\r\n        }\r\n        if (valueIs == \"area\") {\r\n            let totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n            let square = totalSquare * workingValue / sum;\r\n            let s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n            sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n            if (sliceHeight > 0) {\r\n                sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n            }\r\n            else {\r\n                sliceBottomWidth = sliceTopWidth;\r\n            }\r\n        }\r\n        else {\r\n            sliceHeight = pyramidHeight * workingValue / sum;\r\n            sliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n        }\r\n        let labelCoord = this._nextCoord + sliceHeight / 2;\r\n        let sliceX = center;\r\n        let sliceY = this._nextCoord;\r\n        let linkX = center;\r\n        let linkY = sliceY + sliceHeight;\r\n        if (orientation == \"vertical\") {\r\n            label.set(\"y\", labelCoord);\r\n            if (label.get(\"opacity\") > 0) {\r\n                this._rLabels.push({ label: label, y: labelCoord });\r\n            }\r\n            slice.set(\"height\", sliceHeight);\r\n        }\r\n        else {\r\n            label.set(\"x\", labelCoord);\r\n            if (label.get(\"opacity\") > 0) {\r\n                this._hLabels.push({ label: label, y: labelCoord });\r\n            }\r\n            [sliceX, sliceY] = [sliceY, sliceX];\r\n            [linkX, linkY] = [linkY, linkX];\r\n            slice.set(\"width\", sliceHeight);\r\n        }\r\n        slice.setAll({ orientation, bottomWidth: sliceBottomWidth, topWidth: sliceTopWidth, x: sliceX, y: sliceY });\r\n        link.setAll({ orientation, x: linkX, y: linkY, topWidth: sliceBottomWidth, bottomWidth: sliceBottomWidth });\r\n        this._nextSize = sliceBottomWidth;\r\n        this._nextCoord += sliceHeight + linkHeight;\r\n    }\r\n}\r\nObject.defineProperty(PyramidSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PyramidSeries\"\r\n});\r\nObject.defineProperty(PyramidSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: FunnelSeries.classNames.concat([PyramidSeries.className])\r\n});\r\n", "import { PyramidSeries } from \"./PyramidSeries\";\r\nimport { Graphics } from \"../../core/render/Graphics\";\r\nimport { p100, p50 } from \"../../core/util/Percent\";\r\n/**\r\n * Creates a pictorial series for use in a [[SlicedChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_tag\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: \"pictorial\"\r\n        });\r\n        /**\r\n         * A [[Graphics]] element to used as a mask (shape) for the series.\r\n         *\r\n         * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\r\n         */\r\n        Object.defineProperty(this, \"seriesMask\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: Graphics.new(this._root, { position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 })\r\n        });\r\n        Object.defineProperty(this, \"seriesGraphics\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.slicesContainer.children.push(Graphics.new(this._root, { themeTags: [\"pictorial\", \"background\"], position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 }))\r\n        });\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this.set(\"topWidth\", p100);\r\n        this.set(\"bottomWidth\", p100);\r\n        this.set(\"valueIs\", \"height\");\r\n        this.slicesContainer.set(\"mask\", this.seriesMask);\r\n    }\r\n    _updateScale() {\r\n        let slicesContainer = this.slicesContainer;\r\n        let w = slicesContainer.innerWidth();\r\n        let h = slicesContainer.innerHeight();\r\n        let seriesMask = this.seriesMask;\r\n        let seriesGraphics = this.seriesGraphics;\r\n        let scale = seriesMask.get(\"scale\", 1);\r\n        const bounds = seriesMask.localBounds();\r\n        let mw = bounds.right - bounds.left;\r\n        let mh = bounds.bottom - bounds.top;\r\n        if (this.get(\"orientation\") == \"horizontal\") {\r\n            scale = w / mw;\r\n        }\r\n        else {\r\n            scale = h / mh;\r\n        }\r\n        if (scale != Infinity && scale != NaN) {\r\n            seriesMask.set(\"scale\", scale);\r\n            seriesMask.set(\"x\", w / 2);\r\n            seriesMask.set(\"y\", h / 2);\r\n            seriesGraphics.set(\"scale\", scale);\r\n            seriesGraphics.set(\"x\", w / 2);\r\n            seriesGraphics.set(\"y\", h / 2);\r\n        }\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        if (this.isDirty(\"svgPath\")) {\r\n            const svgPath = this.get(\"svgPath\");\r\n            this.seriesMask.set(\"svgPath\", svgPath);\r\n            this.seriesGraphics.set(\"svgPath\", svgPath);\r\n        }\r\n        this._updateScale();\r\n    }\r\n}\r\nObject.defineProperty(PictorialStackedSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PictorialStackedSeries\"\r\n});\r\nObject.defineProperty(PictorialStackedSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: PyramidSeries.classNames.concat([PictorialStackedSeries.className])\r\n});\r\n", "import { PercentChart } from \"../percent/PercentChart\";\r\n/**\r\n * Creates a sliced chart for use with [[FunnelSeries]], [[PyramidSeries]], or [[PictorialStackedSeries]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this.seriesContainer.setAll({ isMeasured: true, layout: this._root.horizontalLayout });\r\n    }\r\n}\r\nObject.defineProperty(SlicedChart, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"SlicedChart\"\r\n});\r\nObject.defineProperty(SlicedChart, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: PercentChart.classNames.concat([SlicedChart.className])\r\n});\r\n"],
  "mappings": "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",
  "names": ["cos", "sin", "labelAngle", "dataItem"]
}
